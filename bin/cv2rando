#!/usr/bin/env node --no-warnings

const _ = require('lodash');
const { cyan, gray, green, magenta, red, yellow } = require('chalk');
const { exec } = require('child_process');
const camelcase = require('camelcase');
const cv2rando = require('../lib/cv2rando');
const fs = require('fs');
const os = require('os');
const path = require('path');
const program = require('commander');
const { getDifficulties } = require('../lib/patch-manager');
const { isAllFlag, log, pad, printHeader } = require('../lib/utils');

const palettes = fs.readdirSync(path.join(__dirname, '..', 'lib', 'palette')).map(p => p.replace(/\.js$/, ''));
const optionList = array => array.map(a => magenta(a)).join(', ');
const bin = process.platform === 'win32' ? 'node .\\bin\\cv2rando' : './bin/cv2rando';

program
	.version(require('../package.json').version)
	.description(`${yellow('Castlevania II: Simon\'s Quest Randomizer')} by ${red('Blood')}${cyan('Sweat')}And${green('Code')}`)
	.usage('[options] [vanilla_rom_file]')
	.option('-d, --difficulty <difficulty>', `Difficulty setting: ${optionList(getDifficulties())}`, 'standard')
	.option('-o, --output <output>', 'filepath for randomized rom output')
	.option('-p, --palette <palette>', `palette selection: ${optionList(palettes)}`)
	.option('-r, --run', 'immediately run with emulator after randomizing (fceux or OpenEmu must be in PATH)')
	.option('-s, --seed <seed>', 'seed to use for randomization')
	.option('-z, --debug', 'enable debug output');

program.outputHelp = function(cb) {
	// make sure we don't have conflicting flags
	const found = {};
	this.options.forEach(o => {
		if (!found[o.short]) { 
			found[o.short] = o; 
		} else {
			throw new Error(`short flag "${o.short}" already used with option "${found[o.short].flags}"`);
		}
		if (!found[o.long]) { 
			found[o.long] = o; 
		} else {
			throw new Error(`long flag "${o.long}" already used with option "${found[o.long].flags}"`);
		}
	});

	// find the longest flags string in our options
	const longest = Math.max(...(this.options.map(o => o.flags.length)));
	const p = str => pad(str, longest);

	// print help
	console.log(this.description());
	console.log('');
	console.log(cyan('Usage'));
	console.log(`  cv2rando ${this.usage()}`);
	console.log('');
	console.log(cyan('Examples'));
	console.log(gray('  # Show this help'));
	console.log(`  ${bin} --help`);
	console.log('');
	console.log(gray('  # Generate a rom with the seed "BSAC" at standard difficulty'));
	console.log(`  ${bin} --seed BSAC cv2.nes`);
	console.log('');
	console.log(gray('  # Generate a rom with the seed "BurbAndSath" at hard difficulty'));
	console.log(`  ${bin} --seed BurbAndSath --difficulty hard cv2.nes`);
	console.log('');
	console.log(gray('  # Generate a rom with a random seed using the "Rondo of Burb" palette'));
	console.log(`  ${bin} --palette rondo-of-burb cv2.nes`);
	console.log('');
	console.log(cyan('Options'));
	this.options.forEach(o => console.log(`  ${p(o.flags)}  ${p(o.description)}`));
	console.log('');
}

async function main() {
	try {
		// process command line arguments
		program.parse(process.argv);
		if (program.debug) {
			global.debug = true;
		}
		if (!getDifficulties().includes(program.difficulty)) {
			throw new Error(`invalid difficulty, valid choices are: ${optionList(getDifficulties())}`);
		}
		if (program.palette && !palettes.includes(program.palette)) {
			throw new Error(`invalid palette, valid choices are: ${optionList(palettes)}`);
		}
		program.rom = program.args[0];

		printHeader('options');
		const opts = _.pick(program, program.options.map(o => camelcase(o.long)).concat('rom'));
		opts.version = program.version();
		log(opts);
		log('');

		// create the rando based on command line options and config.json
		const output = await cv2rando(program);
		console.log(`CV2 Randomizer ${green('successful!')}`);
		console.log(`* rom:     ${cyan(output.rom)}`);
		console.log(`* patch:   ${cyan(output.patch)}`);
		console.log(`* spoiler: ${cyan(output.spoiler)}`);

		// run the rom, if necessary
		if (program.run) {
			const cmd = os.platform() === 'darwin' ? 
				`open -a OpenEmu ${output.rom}` : 
				`fceux ${output.rom}`;
			console.log('');
			console.log(`Launching randomized rom with ${cyan(cmd)}`);
			exec(cmd);
		}
	} catch (err) {
		console.error(red('### CV2 Randomizer creation failed ###'));
		console.log(red(err.stack));
		process.exit(1);
	}
}

main();