#!/usr/bin/env node --no-warnings

const { cyan, green, red } = require('chalk');
const { exec } = require('child_process');
const cv2rando = require('../lib/cv2rando');
const fs = require('fs').promises;
const os = require('os');
const path = require('path');
const program = require('commander');
const { pad } = require('../lib/utils');

program
	.version(require('../package.json').version)
	.description('Castlevania II: Simon\'s Quest Randomizer by BloodSweatAndCode')
	.usage('[options] <rom_input>')
	.option('-a, --enemy-hp', '[ENEMIZER] randomize enemy HP')
	.option('-e, --enemizer', '[ENEMIZER] randomize enemies')
	.option('-i, --itemizer', '[ITEMIZER] randomize items')
	.option('-o, --output <output>', 'filepath for randomized rom output')
	.option('-p, --prices', '[ITEMIZER] randomize merchant prices')
	.option('-r, --run', 'immediately run with emulator after randomizing (fceux or OpenEmu must be in PATH)')
	.option('-s, --seed <seed>', 'seed to use for randomization');

program.outputHelp = function(cb) {
	// make sure we don't have conflicting flags
	const found = {};
	this.options.forEach(o => {
		if (!found[o.short]) { 
			found[o.short] = o; 
		} else {
			throw new Error(`short flag "${o.short}" already used with option "${found[o.short].flags}"`);
		}
		if (!found[o.long]) { 
			found[o.long] = o; 
		} else {
			throw new Error(`long flag "${o.long}" already used with option "${found[o.long].flags}"`);
		}
	});

	// find the longest flags string in our options
	const longest = Math.max(...(this.options.map(o => o.flags.length)));
	
	// printing convenience functions
	const p = str => pad(str, longest);
	const printOption = o => console.log(`  ${p(o.flags)}  ${p(o.description.replace(/\[[^\]]+\]\s+/, ''))}`);

	// sort options into base, itemizer, enemizer, and patches
	const options = {
		base: this.options.filter(o => !/^\[/.test(o.description))
	};
	[ 'itemizer', 'enemizer', 'patch' ].forEach(i => {
		const rx = new RegExp(`^\\[${i.toUpperCase()}\\]`); 
		options[i] = this.options.filter(o => rx.test(o.description)); 
	});

	// print help
	console.log(red(this.description()));
	console.log('');
	console.log(cyan('Usage'));
	console.log(`  cv2rando ${this.usage()}`);
	console.log('');
	console.log(cyan('Options'));
	options.base.forEach(printOption);
	console.log('');
	console.log(cyan('Itemizer Flags (must set -i)'));
	options.itemizer.forEach(printOption);
	console.log('');
	console.log(cyan('Enemizer Flags (must set -e)'));
	options.enemizer.forEach(printOption);
	console.log('');
	console.log(cyan('Patches'));
	options.patch.forEach(printOption);
}

async function main(rom, opts = {}) {
	try {
		// load patches as command line options
		const patches = await fs.readdir(path.join(__dirname, '..', 'patch'));
		patches.filter(p => /\.js$/.test(p)).forEach(p => {
			const patch = require(`../patch/${p}`);
			program.option(patch.flags, `[PATCH] ${patch.description}`);
		});

		// process command line arguments
		program.parse(process.argv);
		const rom = program.args[0];
		if (!rom) {
			throw new Error('must specify a ROM file');
		}

		// create the rando based on command line options and config.json
		const newRom = await cv2rando(program.args[0], program);
		console.log(`CV2 Randomizer successfully written to ${green(newRom)}`);

		// run the rom, if necessary
		if (program.run) {
			const cmd = os.platform() === 'darwin' ? 
				`open -a OpenEmu ${newRom}` : 
				`fceux ${newRom}`;
			console.log(`Launching randomized rom with ${cyan(cmd)}`);
			exec(cmd);
		}
	} catch (err) {
		console.error(red('### CV2 Randomizer creation failed ###'));
		console.log(red(err.stack));
		process.exit(1);
	}
}

main();