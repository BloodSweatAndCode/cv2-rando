#!/usr/bin/env node --no-warnings

const { cyan, green, red } = require('chalk');
const { exec } = require('child_process');
const cv2rando = require('../lib/cv2rando');
const fs = require('fs').promises;
const os = require('os');
const path = require('path');
const program = require('commander');

program
	.version(require('../package.json').version)
	.description('Castlevania II: Simon\'s Quest Randomizer by BloodSweatAndCode')
	.usage('[options] <rom_input>')
	.option('-o, --output <output>', 'filepath for randomized rom output')
	.option('--run', 'immediately run with fceux after randomizing (fceux must be in PATH)')
	.option('-s, --seed <seed>', 'seed to use for randomization');

async function main(rom, opts = {}) {
	try {
		// load patches as command line options
		const patches = await fs.readdir(path.join(__dirname, '..', 'patch', 'post'));
		patches.forEach(p => {
			const patch = require(`../patch/post/${p}`);
			program.option(patch.flags, `[PATCH] ${patch.description}`);
		});

		// process command line arguments
		program.parse(process.argv);
		const rom = program.args[0];
		if (!rom) {
			throw new Error('must specify a ROM file');
		}

		// create the rando based on command line options and config.json
		const newRom = await cv2rando(program.args[0], program);
		console.log(`CV2 Randomizer successfully written to ${green(newRom)}`);

		// run the rom, if necessary
		if (program.run) {
			const cmd = os.platform() === 'darwin' ? 
				`open -a OpenEmu ${newRom}` : 
				`fceux ${newRom}`;
			console.log(`Launching randomized rom with ${cyan(cmd)}`);
			exec(cmd);
		}

		// process.exit(0);
	} catch (err) {
		console.error(red('### CV2 Randomizer creation failed ###'));
		console.log(red(err.stack));
		process.exit(1);
	}
}

main();